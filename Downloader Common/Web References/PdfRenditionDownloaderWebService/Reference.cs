//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace Downloader_Common.PdfRenditionDownloaderWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PdfRenditionDownloaderSoap", Namespace="http://localhost/DigitalPen/PdfRenditionDownloaderService")]
    public partial class PdfRenditionDownloader : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPdfRenditionManifestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPdfRenditionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetManifestDownloadedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PdfRenditionDownloader() {
            this.Url = "http://localhost/DigitalPen/PdfRenditionDownloaderService/PdfRenditionDownloader." +
                "asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetPdfRenditionManifestCompletedEventHandler GetPdfRenditionManifestCompleted;
        
        /// <remarks/>
        public event GetPdfRenditionCompletedEventHandler GetPdfRenditionCompleted;
        
        /// <remarks/>
        public event SetManifestDownloadedCompletedEventHandler SetManifestDownloadedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/DigitalPen/PdfRenditionDownloaderService/GetPdfRenditionManifest" +
            "", RequestNamespace="http://localhost/DigitalPen/PdfRenditionDownloaderService", ResponseNamespace="http://localhost/DigitalPen/PdfRenditionDownloaderService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetPdfRenditionManifest(string customerCode, string siteCode, int manifestNumber) {
            object[] results = this.Invoke("GetPdfRenditionManifest", new object[] {
                        customerCode,
                        siteCode,
                        manifestNumber});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPdfRenditionManifest(string customerCode, string siteCode, int manifestNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPdfRenditionManifest", new object[] {
                        customerCode,
                        siteCode,
                        manifestNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetPdfRenditionManifest(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPdfRenditionManifestAsync(string customerCode, string siteCode, int manifestNumber) {
            this.GetPdfRenditionManifestAsync(customerCode, siteCode, manifestNumber, null);
        }
        
        /// <remarks/>
        public void GetPdfRenditionManifestAsync(string customerCode, string siteCode, int manifestNumber, object userState) {
            if ((this.GetPdfRenditionManifestOperationCompleted == null)) {
                this.GetPdfRenditionManifestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPdfRenditionManifestOperationCompleted);
            }
            this.InvokeAsync("GetPdfRenditionManifest", new object[] {
                        customerCode,
                        siteCode,
                        manifestNumber}, this.GetPdfRenditionManifestOperationCompleted, userState);
        }
        
        private void OnGetPdfRenditionManifestOperationCompleted(object arg) {
            if ((this.GetPdfRenditionManifestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPdfRenditionManifestCompleted(this, new GetPdfRenditionManifestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/DigitalPen/PdfRenditionDownloaderService/GetPdfRendition", RequestNamespace="http://localhost/DigitalPen/PdfRenditionDownloaderService", ResponseNamespace="http://localhost/DigitalPen/PdfRenditionDownloaderService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetPdfRendition(string customerCode, string siteCode, int formHistoryTransactionPdfUid) {
            object[] results = this.Invoke("GetPdfRendition", new object[] {
                        customerCode,
                        siteCode,
                        formHistoryTransactionPdfUid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPdfRendition(string customerCode, string siteCode, int formHistoryTransactionPdfUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPdfRendition", new object[] {
                        customerCode,
                        siteCode,
                        formHistoryTransactionPdfUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetPdfRendition(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPdfRenditionAsync(string customerCode, string siteCode, int formHistoryTransactionPdfUid) {
            this.GetPdfRenditionAsync(customerCode, siteCode, formHistoryTransactionPdfUid, null);
        }
        
        /// <remarks/>
        public void GetPdfRenditionAsync(string customerCode, string siteCode, int formHistoryTransactionPdfUid, object userState) {
            if ((this.GetPdfRenditionOperationCompleted == null)) {
                this.GetPdfRenditionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPdfRenditionOperationCompleted);
            }
            this.InvokeAsync("GetPdfRendition", new object[] {
                        customerCode,
                        siteCode,
                        formHistoryTransactionPdfUid}, this.GetPdfRenditionOperationCompleted, userState);
        }
        
        private void OnGetPdfRenditionOperationCompleted(object arg) {
            if ((this.GetPdfRenditionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPdfRenditionCompleted(this, new GetPdfRenditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/DigitalPen/PdfRenditionDownloaderService/SetManifestDownloaded", RequestNamespace="http://localhost/DigitalPen/PdfRenditionDownloaderService", ResponseNamespace="http://localhost/DigitalPen/PdfRenditionDownloaderService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetManifestDownloaded(string customerCode, string siteCode, int manifestNumber) {
            object[] results = this.Invoke("SetManifestDownloaded", new object[] {
                        customerCode,
                        siteCode,
                        manifestNumber});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetManifestDownloaded(string customerCode, string siteCode, int manifestNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetManifestDownloaded", new object[] {
                        customerCode,
                        siteCode,
                        manifestNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSetManifestDownloaded(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetManifestDownloadedAsync(string customerCode, string siteCode, int manifestNumber) {
            this.SetManifestDownloadedAsync(customerCode, siteCode, manifestNumber, null);
        }
        
        /// <remarks/>
        public void SetManifestDownloadedAsync(string customerCode, string siteCode, int manifestNumber, object userState) {
            if ((this.SetManifestDownloadedOperationCompleted == null)) {
                this.SetManifestDownloadedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetManifestDownloadedOperationCompleted);
            }
            this.InvokeAsync("SetManifestDownloaded", new object[] {
                        customerCode,
                        siteCode,
                        manifestNumber}, this.SetManifestDownloadedOperationCompleted, userState);
        }
        
        private void OnSetManifestDownloadedOperationCompleted(object arg) {
            if ((this.SetManifestDownloadedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetManifestDownloadedCompleted(this, new SetManifestDownloadedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPdfRenditionManifestCompletedEventHandler(object sender, GetPdfRenditionManifestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPdfRenditionManifestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPdfRenditionManifestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPdfRenditionCompletedEventHandler(object sender, GetPdfRenditionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPdfRenditionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPdfRenditionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetManifestDownloadedCompletedEventHandler(object sender, SetManifestDownloadedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetManifestDownloadedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetManifestDownloadedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591